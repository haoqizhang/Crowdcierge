// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function() {
    var ActivityItemsView, CheckItemsView, TodoItemsView, _ref, _ref1, _ref2, _ref3;

    com.uid.crowdcierge.StreamView = (function(_super) {
      __extends(StreamView, _super);

      function StreamView() {
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = StreamView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StreamView.prototype.className = 'stream-view';

      StreamView.prototype.initialize = function() {
        this.session = this.options.session;
        this.itineraryModel = this.session.itineraryModel;
        this.activitiesModel = this.session.activitiesModel;
        this.todoItemModel = this.session.todoItemModel;
        this.checkItemModel = this.session.checkItemModel;
        return this.currentTaskModel = this.session.currentTaskModel;
      };

      StreamView.prototype.render = function() {
        var source, template;

        this.$el.empty();
        source = $('#stream-view-template').html();
        template = Handlebars.compile(source);
        this.$el.html(template(this.currentTaskModel.attributes));
        this.checkItems = new CheckItemsView({
          checkItemModel: this.checkItemModel
        });
        this.todoItems = new TodoItemsView({
          todoItemModel: this.todoItemModel
        });
        this.activityItems = new ActivityItemsView({
          activitiesModel: this.activitiesModel,
          itineraryModel: this.itineraryModel
        });
        this.checkItems.render();
        this.todoItems.render();
        this.activityItems.render();
        this.$('.stream-item-list').append(this.checkItems.$el);
        this.$('.stream-item-list').append(this.todoItems.$el);
        return this.$('.stream-item-list').append(this.activityItems.$el);
      };

      return StreamView;

    })(Backbone.View);
    TodoItemsView = (function(_super) {
      __extends(TodoItemsView, _super);

      function TodoItemsView() {
        this._viewTodoItem = __bind(this._viewTodoItem, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref1 = TodoItemsView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TodoItemsView.prototype.tag = 'tbody';

      TodoItemsView.prototype.id = 'sysStreamBody';

      TodoItemsView.prototype.events = {
        'click .todo': '_viewTodoItem'
      };

      TodoItemsView.prototype.initialize = function() {
        this.todoItemModel = this.options.todoItemModel;
        return this.listenTo(this.todoItemModel, 'add change remove reset', this.render);
      };

      TodoItemsView.prototype.render = function() {
        var $item, model, source, template, _i, _len, _ref2, _results;

        this.$el.empty();
        _ref2 = this.todoItemModel.models;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          model = _ref2[_i];
          source = $("#todo-template").html();
          template = Handlebars.compile(source);
          $item = $(template(model));
          _results.push(this.$el.append($item));
        }
        return _results;
      };

      TodoItemsView.prototype._viewTodoItem = function(evt) {
        var id;

        id = evt.currentTarget.id;
        return console.log(this.todoItemModel.get(id));
      };

      return TodoItemsView;

    })(Backbone.View);
    CheckItemsView = (function(_super) {
      __extends(CheckItemsView, _super);

      function CheckItemsView() {
        this.initialize = __bind(this.initialize, this);        _ref2 = CheckItemsView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      CheckItemsView.prototype.tag = 'tbody';

      CheckItemsView.prototype.id = 'checkStreamBody';

      CheckItemsView.prototype.initialize = function() {};

      return CheckItemsView;

    })(Backbone.View);
    return ActivityItemsView = (function(_super) {
      __extends(ActivityItemsView, _super);

      function ActivityItemsView() {
        this._selectActivity = __bind(this._selectActivity, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref3 = ActivityItemsView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      ActivityItemsView.prototype.tag = 'tbody';

      ActivityItemsView.prototype.id = 'userStreamBody';

      ActivityItemsView.prototype.events = {
        'click .stream-item': '_selectActivity'
      };

      ActivityItemsView.prototype.initialize = function() {
        this.activitiesModel = this.options.activitiesModel;
        this.itineraryModel = this.options.itineraryModel;
        return this.listenTo(this.activitiesModel, 'add change remove reset', this.render);
      };

      ActivityItemsView.prototype.render = function() {
        var $item, index, model, source, template, _i, _len, _ref4, _results;

        this.$el.empty();
        _ref4 = this.activitiesModel.get('items').models;
        _results = [];
        for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
          model = _ref4[_i];
          source = $("#stream-item-template").html();
          template = Handlebars.compile(source);
          index = _.indexOf(this.itineraryModel.models, model) + 1;
          $item = $(template(_.defaults({
            ind: index,
            inIt: index > 0
          }, model)));
          _results.push(this.$el.append($item));
        }
        return _results;
      };

      ActivityItemsView.prototype._selectActivity = function(evt) {
        var id;

        id = evt.currentTarget.id;
        return this.activitiesModel.set('selected', this.activitiesModel.get('items').get(id));
      };

      return ActivityItemsView;

    })(Backbone.View);
  })();

}).call(this);
