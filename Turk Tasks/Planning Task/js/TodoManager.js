// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function() {
    return com.uid.crowdcierge.TodoManager = (function() {
      function TodoManager(options) {
        this._buildActivityTodoObject = __bind(this._buildActivityTodoObject, this);
        this._updateTimeConstraints = __bind(this._updateTimeConstraints, this);
        this._updateCalendarConstraints = __bind(this._updateCalendarConstraints, this);
        this._updateActivityConstraints = __bind(this._updateActivityConstraints, this);
        this.updateTodo = __bind(this.updateTodo, this);        _.extend(this, Backbone.Events, options);
        this.itineraryModel = this.session.itineraryModel;
        this.constraintsModel = this.session.constraintsModel;
        this.todoItemModel = this.session.todoItemModel;
        this.currentTaskModel = this.session.currentTaskModel;
        this.listenTo(this.itineraryModel, 'add remove reset', this.updateTodo);
        this.listenTo(this.constraintsModel, 'add remove reset', this.updateTodo);
      }

      TodoManager.prototype.updateTodo = function() {
        this._updateActivityConstraints();
        this._updateCalendarConstraints();
        return this._updateTimeConstraints();
      };

      TodoManager.prototype._updateActivityConstraints = function() {
        var act, activityBuckets, cat, con, correct, diff, model, num, obj, timeBuckets, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;

        timeBuckets = {};
        activityBuckets = {};
        _ref = this.currentTaskModel.get('categories');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cat = _ref[_i];
          timeBuckets[cat] = 0;
          activityBuckets[cat] = 0;
        }
        _ref1 = this.itineraryModel.models;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          act = _ref1[_j];
          _ref2 = act.get('categories');
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            cat = _ref2[_k];
            timeBuckets[cat] += parseInt(act.get('duration'));
            activityBuckets[cat] += 1;
          }
        }
        _ref3 = this.constraintsModel.models;
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          con = _ref3[_l];
          if (con.get('unit' === 'activity')) {
            num = activityBuckets[con.get('cat')];
          } else if (con.get('unit' === 'hours')) {
            num = timeBuckets[con.get('cat')] / 60;
          } else {
            num = timeBuckets[con.get('cat')];
          }
          switch (con.get('compare')) {
            case 'at least':
              correct = num >= con.get('value');
              break;
            case 'exactly':
              correct = num === con.get('value');
              break;
            case 'at most':
              correct = num <= con.get('value');
          }
          if (!correct) {
            diff = con.get('value' - num);
            obj = this._buildActivityTodoObject(con, num, diff);
            model = new Backbone.Model(obj);
            _results.push(this.todoItemModel.push(model));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      TodoManager.prototype._updateCalendarConstraints = function() {};

      TodoManager.prototype._updateTimeConstraints = function() {};

      TodoManager.prototype._buildActivityTodoObject = function(con, num, diff) {
        var err, ret;

        ret = {};
        switch (con.get('compare')) {
          case 'at most':
            err = 'Remove some \'' + con.get('cat') + '\' from the itinerary';
            break;
          case 'at least':
            err = 'Add more \'' + con.get('cat') + '\' to the itinerary';
            break;
          case 'exactly':
            if (diff < 0) {
              err = 'Remove some \'' + con.get('cat') + '\' from the itinerary';
            } else {
              err = 'Add more \'' + con.get('cat') + '\' to the itinerary';
            }
        }
        ret.name = err;
        ret.categories = ['todo', con.get('cat')];
        ret.description = ret.name;
        return ret;
      };

      return TodoManager;

    })();
  })();

}).call(this);
